{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lekha\\\\Documents\\\\Documents\\\\Mathew\\\\Bootcamp\\\\classRepo\\\\9 React\\\\Employee Directory HW\\\\Employee-Directory-master\\\\src\\\\components\\\\Main.js\";\nimport React, { Component } from \"react\";\nimport Header from './Header';\nimport Search from './SearchBox';\nimport EmployeesTable from './DataTables';\nimport API from \"../utils/API\";\n\nclass EmployeesDirectory extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      employees: [],\n      query: '',\n      sortedEmployees: [],\n      sortType: ''\n    };\n\n    this.createNewEmployeesList = employees => {\n      const newEmployeesList = employees.map(employee => {\n        return {\n          dob: employee.dob.date,\n          email: employee.email,\n          name: `${employee.name.first} ${employee.name.last}`,\n          phone: employee.phone,\n          image: employee.picture.large\n        };\n      });\n      this.setState({\n        employees: newEmployeesList\n      });\n    };\n\n    this.filterByName = event => {\n      const query = event.target.value;\n      this.setState({\n        query\n      }, () => {\n        let employeesList;\n\n        if (this.state.sortedEmployees.length > 0) {\n          employeesList = this.state.sortedEmployees;\n        } else {\n          employeesList = this.state.employees;\n        }\n\n        const newEmployeeTable = employeesList.map(employee => {\n          let name = employee.name.toLowerCase();\n\n          if (name.indexOf(this.state.query.toLowerCase()) !== -1) {\n            return { ...employee,\n              display: true\n            };\n          } else {\n            return { ...employee,\n              display: false\n            };\n          }\n        });\n        this.setState({\n          employees: newEmployeeTable,\n          sortedEmployees: newEmployeeTable\n        });\n      });\n    };\n\n    this.sortAlpha = employees => {\n      const sortType = this.state.sortType;\n\n      if (sortType === 'desc' || sortType === '') {\n        employees.sort(this.dynamicSort(\"name\"));\n        this.setState({\n          sortedEmployees: employees,\n          sortType: 'asc'\n        });\n      } else if (sortType === 'asc') {\n        employees.sort(this.dynamicSort(\"-name\"));\n        this.setState({\n          sortedEmployees: employees,\n          sortType: 'desc'\n        });\n      }\n    };\n\n    this.dynamicSort = property => {\n      var sortOrder = 1;\n\n      if (property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n      }\n\n      return function (a, b) {\n        if (sortOrder === -1) {\n          return b[property].localeCompare(a[property]);\n        } else {\n          return a[property].localeCompare(b[property]);\n        }\n      };\n    };\n  }\n\n  componentDidMount() {\n    this.loadAllEmployees();\n  }\n\n  loadAllEmployees() {\n    API.getEmployees().then(res => {\n      this.createNewEmployeesList(res.data.results);\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    let employeesList;\n\n    if (this.state.sortedEmployees.length > 0) {\n      employeesList = this.state.sortedEmployees;\n    } else {\n      employeesList = this.state.employees;\n    }\n\n    let sortArrow;\n    const sortState = this.state.sortType;\n\n    if (sortState === 'asc') {\n      sortArrow = /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, \"\\u25BC\");\n    } else if (sortState === 'desc') {\n      sortArrow = /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, \"\\u25B2\");\n    } else {\n      sortArrow = '';\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Search, {\n      filterByName: this.filterByName,\n      query: this.state.query,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(EmployeesTable, {\n      employees: employeesList,\n      sortAlpha: this.sortAlpha,\n      sortArrow: sortArrow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default EmployeesDirectory;","map":{"version":3,"sources":["C:/Users/lekha/Documents/Documents/Mathew/Bootcamp/classRepo/9 React/Employee Directory HW/Employee-Directory-master/src/components/Main.js"],"names":["React","Component","Header","Search","EmployeesTable","API","EmployeesDirectory","state","employees","query","sortedEmployees","sortType","createNewEmployeesList","newEmployeesList","map","employee","dob","date","email","name","first","last","phone","image","picture","large","setState","filterByName","event","target","value","employeesList","length","newEmployeeTable","toLowerCase","indexOf","display","sortAlpha","sort","dynamicSort","property","sortOrder","substr","a","b","localeCompare","componentDidMount","loadAllEmployees","getEmployees","then","res","data","results","catch","err","console","log","render","sortArrow","sortState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from './Header';\nimport Search from './SearchBox';\nimport EmployeesTable from './DataTables';\nimport API from \"../utils/API\";\n\nclass EmployeesDirectory extends Component {\n\n    state = {\n        employees: [],\n        query: '',\n        sortedEmployees: [],\n        sortType: ''\n    };\n\n    componentDidMount() {\n       this.loadAllEmployees();\n    }\n\n    loadAllEmployees() {\n        API.getEmployees()\n        .then(res => { \n            this.createNewEmployeesList(res.data.results);\n        })\n        .catch(err => console.log(err));\n    }\n\n    createNewEmployeesList = employees => {\n\n        const newEmployeesList = employees.map((employee => {\n\n            return (\n                {\n                    dob: employee.dob.date,\n                    email: employee.email,\n                    name: `${employee.name.first} ${employee.name.last}`,\n                    phone: employee.phone,\n                    image: employee.picture.large\n                }\n            )\n\n        }))\n\n        this.setState({\n            employees: newEmployeesList\n        })\n    }\n\n \n     filterByName = event => {\n\n        const query = event.target.value;\n\n         this.setState({\n            query\n        }, () => {\n\n            let employeesList;\n\n            if (this.state.sortedEmployees.length > 0) {\n                employeesList = this.state.sortedEmployees;\n            } else {\n                employeesList = this.state.employees;\n            }\n           \n       \n            const newEmployeeTable = employeesList.map(employee => {\n                let name = employee.name.toLowerCase();\n\n                if (name.indexOf(this.state.query.toLowerCase()) !== -1) {\n                    return {...employee, display: true}\n                } else {\n                    return {...employee, display: false}\n                }\n            });\n\n            this.setState({\n                employees: newEmployeeTable,\n                sortedEmployees: newEmployeeTable\n            });\n\n        });\n\n    }\n\n    sortAlpha = employees => {\n\n        const sortType = this.state.sortType;\n\n        if (sortType === 'desc' || sortType === '') {\n          \n            employees.sort(this.dynamicSort(\"name\"));\n            this.setState({\n                sortedEmployees: employees,\n                sortType: 'asc'\n            });\n        } else if (sortType === 'asc') {\n            \n            employees.sort(this.dynamicSort(\"-name\"));\n            this.setState({\n                sortedEmployees: employees,\n                sortType: 'desc'\n            });\n        }\n\n    }\n\n    dynamicSort = property => {\n\n        var sortOrder = 1;\n\n        if(property[0] === \"-\") {\n            sortOrder = -1;\n            property = property.substr(1);\n        }\n\n        return function (a,b) {\n            if (sortOrder === -1) {\n                return b[property].localeCompare(a[property]);\n            } else {\n                return a[property].localeCompare(b[property]);\n            }        \n        }\n    }\n\n    render() {\n\n        let employeesList;\n\n        if (this.state.sortedEmployees.length > 0) {\n            employeesList = this.state.sortedEmployees;\n        } else {\n            employeesList = this.state.employees;\n        }\n\n      \n        let sortArrow;\n\n        const sortState = this.state.sortType;\n\n        if (sortState === 'asc') {\n            \n            sortArrow = <span>&#9660;</span>;\n        } else if (sortState === 'desc') {\n          \n            sortArrow = <span>&#9650;</span>;\n        } else {\n            sortArrow = '';\n        }\n\n        return(\n            <>\n                <Header />\n                <Search filterByName={this.filterByName} query={this.state.query} />\n                <EmployeesTable employees={employeesList} sortAlpha={this.sortAlpha} sortArrow={sortArrow}  />\n            </>\n        );\n    }\n}\n\nexport default EmployeesDirectory;"]},"metadata":{},"sourceType":"module"}